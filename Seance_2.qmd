---
title: "Séance 2"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false

library(questionr)
library(tidyverse)

download.file("https://vico.hypotheses.org/files/2021/03/vico2020.csv",
              "vico.csv")
vico <- read_csv2("vico.csv")
data("hdv2003")
rp <- aws.s3::s3read_using(FUN = data.table::fread,
                           object = "/diffusion/RP/rplyon_2017.csv",
                           bucket = "aubinpoissonnier",
                           opts = list("region" = ""))
```

# Compter avec des variables catégorielles

Vous travaillez ici avec les données du recensement anonymisées, publiées sous forme d'un fichier comportant une ligne par individu. La base `rp` correspond au recensement de 2017 pour la ville de Lyon. Le dictionnaire des codes est disponible à [cette adresse](https://www.insee.fr/fr/statistiques/4802064?sommaire=4508161#dictionnaire).

## Tri à plat et tri croisé

### Compter les effectifs absolus

La fonction `table` fait partie des fonctions intégrées au R de base. Elle permet de réaliser des tris à plat sur un vecteur et des tris croisés sur deux vecteurs.

Le tableau `rp` contient une colonne `sexe` qui correspond à la variable qui vaut 1 si l'individu recensé est un homme et 2 si l'individu est une femme. On peut compter le nombre d'hommes et de femmes :

```{r}
table(rp$sexe)
```

On peut aussi connaître le nombre de personnes en couple grâce à la colonne `couple`

```{r}
table(rp$couple)
```

Quand les données sont livrées avec des poids d'échantillonnage, on peut utiliser la fonction `wtd.table` pour calculer des effectifs pondérés.

```{r}
wtd.table(rp$sexe, weights = rp$ipondi)
```

### Calculer les pourcentages

Souvent, on cherche plutôt à obtenir des pourcentages que des effectifs absolus. La fonction `proportions` permet de calculer la part associée chaque modalité de la variable. Elle s'applique à l'objet créé par la fonction `table`.

La part d'hommes/de femmes dans la population du département du Rhône

```{r}
tab_sexe <- wtd.table(rp$sexe, weights = rp$ipondi)
proportions(tab_sexe)
```

La part de personnes en couple

```{r}
tab_couple <- wtd.table(rp$couple, weights = rp$ipondi)
proportions(tab_couple)
```

On peut encore modifier ce tableau pour faciliter la lecture, par exemple en convertissant cette proportion en pourcentages

```{r}
# En décomposant ligne par ligne
tab_sexe <- wtd.table(rp$sexe, weights = rp$ipondi)
tab_sexe <- proportions(tab_sexe)
tab_sexe <- tab_sexe*100
tab_sexe <- round(tab_sexe, 2)
tab_sexe

# En cumulant les fonctions
tab_sexe <- proportions(wtd.table(rp$sexe, weights = rp$ipondi))
tab_sexe <- round(tab_sexe*100, 2)
tab_sexe
```

### Croiser des variables

Pour croiser deux variables, il suffit d'ajouter la deuxième colonne comme deuxième argument. La part d'hommes et de femmes en couple :

```{r}
tab_sexe_couple <- wtd.table(rp$sexe, rp$couple, weights = rp$ipondi)
tab_sexe_couple
```

Pour les tableaux croisés, les fonctions `lprop` et `cprop` du package `questionr` permettent d'obtenir très facilement les pourcentages en ligne ou en colonne ainsi que les marges.

```{r}
rprop(tab_sexe_couple)
cprop(tab_sexe_couple)
```

## Mettre en forme un tableau

La mise en forme des tableaux sur R et leur exportation demande de nombreuses étapes supplémentaires. Le plus simple pour vous reste de construire votre tableau en recopiant à la main les valeurs sans faire d'erreurs, ou bien utiliser la fonction View() et copier coller les valeurs dans un logiciel de traitement de texte (Word ou Libre Office Writer) ou un tableur (Excel ou Libre Office Calc). N'oubliez pas d'ajouter les parts dans l'ensemble de la population pour comparer. Nous verrons dans la prochaine séance des packages supplémentaires pour le faire directement dans R.

## Exercices

1.  Déterminez la part de la population qui est étudiante (= lyonnais·es qui sont inscrit·es dans un établissement d'enseignement supérieur)

```{r}

```

2.  Déterminez pour les hommes et pour les femmes la part d'étudiant·es

```{r}

```

3.  Déterminez la part de femmes et d'hommes chez les étudiant·es et chez les non étudiant·es

```{r}

```

# Tests logiques

L'essentiel du recodage s'opère avec des instructions logiques simples (égal, différent, inférieur ou supérieur à) que l'on peut combiner sur une variable ou plusieurs variables). On utilise pour cela des tests.

Un test est une opération logique de comparaison qui renvoie vrai (`TRUE`) ou faux (`FALSE`) pour chacun des éléments d'un vecteur.

Parmi les opérateurs de comparaison disponibles, on trouve notamment :

-   `==` qui teste l'égalité
-   `!=` qui teste la différence
-   `>`, `<`, `<=`, `>=` qui testent la supériorité ou l'infériorité
-   `%in%` qui teste l'appartenance à un ensemble de valeurs

Exemple le plus simple :

```{r}
2 == 3
```

```{r}
2 != 3
```

Exemple appliqué à un vecteur :

```{r}
x <- 1:10
x < 5
```

On peut combiner plusieurs tests avec les opérateurs logiques *et* (`&`) et *ou* (`|`). Ainsi, si on veut tester qu'une valeur est comprise entre 3 et 6 inclus, on peut faire :

```{r}
x >= 3 & x <= 6
```

Si on veut tester qu'une valeur est égale à "Bleu" ou à "Vert", on peut faire :

```{r}
vec <- c("Jaune", "Jaune", "Rouge", "Vert")
vec == "Jaune" | vec == "Vert"
```

À noter que dans ce cas, on peut utiliser l'opérateur `%in%`[^1], qui teste si une valeur fait partie des éléments d'un vecteur :

[^1]: Pour accéder à la page de documentation de fonctions comme `%in%`, on ne peut pas utiliser `?%in%`, qui renvoie une erreur. Vous pouvez faire `?"%in%"`, `help("%in%")` ou, dans ce cas, `?match`, car les deux fonctions sont documentées sur la même page d'aide.

```{r}
vec %in% c("Jaune", "Vert")
```

::: callout-warning
Attention, si on souhaite tester si une valeur `x` est inconnue (ou 'manquante'), c'est-à-dire si elle est codée `NA` (*Not Available*), faire le test `x == NA` *ne donnera pas le résultat escompté*. En effet, fidèle à sa réputation de rigueur informaticienne, pour R `NA == NA` ne vaut pas `TRUE` mais... `NA` (on ne sait pas si une valeur inconnue est égale à une autre valeur inconnue).

Pour tester si une valeur est inconnue (`NA`), il faut utiliser la fonction dédiée `is.na` et faire `is.na(x)`.

Cependant, par convention, `NA %in% NA` vaut `TRUE`.
:::

Enfin, on peut inverser un test avec l'opérateur *non* (`!`) :

```{r}
!(vec %in% c("Jaune", "Vert"))
```

## Exercices

Appliquez un test sur les habitant·es de Lyon qui vérifie si ils et elles sont :

1.  Immigré·es
2.  Immigré·es et majeur·es
3.  Immgré·es marié·es ou pacsé·es
4.  Immigré·es français·es marié·es ou pacsé
5.  Immigré·es français marié·es ou immigré·es étranger·es pacsé·es
6.  Immigré·es pas propriétaires

```{r}

```

# Le test du Khi2

Le test du Khi2 peut être obtenu à l'aide de la fonction `chisq.test`. Il suffit de mettre comme arguments les deux colonnes que l'on veut croiser pour tester leur indépendance.

```{r}
# Tableau croisé du sexe et de la pratique religieuse
tab_loisir <- wtd.table(hdv2003$sexe, hdv2003$relig, weights = hdv2003$poids)
rprop(tab_loisir)
# Test du Khi2 du sexe et du loisir
chisq.test(hdv2003$sexe, hdv2003$relig)
```

Dans le cas où une pondération est présente, il est nécessaire de recourir au package `survey`. Son fonctionnement est particulier, un exemple minimal est donc présenté ici pour le cas d'un test du Khi2 opéré pour un plan d'échantillonnage simple (on précise juste des poids de sondage).

```{r}
install.packages("survey")
library(survey)

# On crée un "design" qui associe les données et leur plan d'échantillonnage
hdv2003w <- 
  svydesign(
    # On précise les données
    # Ici, notre tableau hdv2003
    data = hdv2003,
    # Un argument obligatoire qui n'est pas détaillé ici
    ids = ~ 1,
    # On précise la colonne des poids
    weights = hdv2003$poids
  )

# On utilise la fonction du Khi2 en créant une formule
svychisq(
  # D'abord la formule des deux variables à croiser
  ~ sexe+relig,
  # Puis le design
  design = hdv2003w
)
```

# Le tidyverse

Le terme *tidyverse* est une contraction de *tidy* (qu'on pourrait traduire par "bien rangé") et de *universe*. Il s'agit en fait d'une collection d'extensions conçues pour travailler ensemble et basées sur une philosophie commune :

-   `ggplot2` (visualisation)
-   `dplyr` (manipulation des données)
-   `tidyr` (remise en forme des données)
-   `purrr` (programmation)
-   `readr` (importation de données)
-   `tibble` (tableaux de données)
-   `forcats` (variables qualitatives)
-   `stringr` (chaînes de caractères)
-   `lubridate` (manipulation de dates)

Un des objectifs de ces extensions est de fournir des fonctions avec une syntaxe cohérente, qui fonctionnent bien ensemble, et qui retournent des résultats prévisibles. Nous allons recourrir à cette syntaxe pour transformer nos données.

## Filtrer des lignes et sélectionner des colonnes

### `filter`

`filter` sélectionne des lignes d'une table selon une condition. On lui passe en paramètre un test, et seules les lignes pour lesquelles ce test renvoie `TRUE` (vrai) sont conservées. On réutilise donc les opérateurs logiques vus dans le cas des tests. Puisque le premier argument est le tableau en lui-même, il n'est plus nécessaire d'utiliser l'opérateur `$` et il suffit d'utiliser le nom dans colonnes pour filter.

```{r}
# Filtre pour sélectionner les femmes
rp_f <- filter(rp, sexe == 2)

# Filtre pour sélectionner les femmes immigrées
rp_f <- filter(rp, sexe == 2 & immi == 1)
```

On peut également placer des fonctions dans les tests, qui nous permettent par exemple de sélectionner les personnes qui sont plus âgées que l'âge médian.

```{r}
rp_senior <- filter(rp, agerev > median(agerev))
```

### `select`

`select` permet de sélectionner des colonnes d'un tableau de données.

```{r}
# Sélectionner uniquement les colonnes du sexe et de l'âge
select(rp, sexe, agerev)
```

Si on fait précéder le nom d'un `-`, la colonne est éliminée plutôt que sélectionnée :

```{r}
# Sélectionner toutes les colonnes sauf le sexe et l'âge
select(rp, -sexe, -agerev)
```

## Créer une colonne et recoder sous conditions

### `mutate`

La fonction `mutate` permet de créer une nouvelle colonne. C'est une alternative à la méthode de base avec l'opétaeur \$. Le premier type de recodage consiste à changer la nature d'une colonne. On vérifie la nature d'une colonne avec la fonction `class` et on peut la modifier avec les fonctions de la forme `as.nature_désirée` : `as.integer`, `as.character` etc.

```{r}
# Vérifier la nature de la variable
class(rp$agerev)

# On transforme cette colonne en format texte
# Ancienne solution avec l'opérateur $
rp$agerev_txt <- as.character(rp$agerev)
class(rp$agerev_txt)

# Nouvelle solution avec la fonction mutate
# Attention : on transforme le tableau de données, plus seulement une colonne
# À nouveau, on fait directement référence au nom des colonnes
rp <-
  mutate(
    # Le premier argument est le tableau à modifié
    rp,
    # Le deuxième la variable à créer : son nom puis son contenu
    agerev_txt = as.character(agerev)
  )
```

### `if_else`

La fonction `if_else` permet de faire une action sous condition : si l'âge est supérieur à 18, donne la valeur "majeur.e", sinon donne la valeur "mineur.e". case_when étend ce fonctionnement à plus d'une possibilité : si l'âge est supérieur à 18 donne "majeur.e", si l'âge est compris entre 18 et 64 donne "adulte", si l'âge est supérieur à 64 donne "senior".

On pourra dire à R : crée une nouvelle colonne (`mutate`) à partir d'un test sur la valeur initiale de la variable (`if_else`).

```{r}
# Voici deux versions du codage de l'âge des personnes recensées, soit la variable agerev. La première est lisible, la deuxième est commentée ligne par ligne.

# Version plus lisible sans les commentaires
rp <- mutate(
  rp,
  age_rec = 
    if_else(
      agerev > 17,
      "Majeur.e",
      "Mineur.e"
    )
)

# Version commentée
rp <-
  # J'utilise la fonction mutate pour créer une colonne
  mutate(
    # Le premier argument de mutate, le tableau à transformer
    rp,
    # Le deuxième argument de mutate, le nom de la colonne à créer (à gauche du =) et la valeur que je lui donne (à droite du =)
    age_rec = 
      # Elle sera créée à l'aide du test opérée par la fonction ifelse
      if_else(
        # Le premier argument de ifelse, la condition
        agerev > 17,
        # Le deuxième argument de ifelse, la valeur à donner si la condition est vérifiée
        "Majeur.e", 
        # Le troisième argument de ] ifelse, la valeur à donner si la condition n'est pas vérifié
        "Mineur.e"
        # Je ferme la parenthèse de la fonction if_else
      )
    # Je ferme la parenthèse de la fonction mutate
  ) 

# On obtient bien une nouvelle variable/colonne nommée age_rec qui prend soit la valeur "Mineur.e", soit la valeur "Majeur.e"
```

### `case_when`

Dès qu'on veut utiliser plus d'un test (par exemple, obtenir trois valeurs : mineur.e, adulte, senior), il faut utiliser la fonction case_when.

```{r}
# Version lisible
rp <- 
  mutate(
  rp,
  age_rec =
    case_when(
      agerev < 18 ~ "Mineur.e",
      agerev > 17 & agerev < 65 ~ "Adulte",
      agerev > 64 ~ "Senior"
    )
)


# Version commentée
rp <-
  # Je crée une variable grâce à la fonction mutat
  mutate(
    # Le premier argument, je transforme le tableau rp
    rp,
    # Le deuxième argument, la variable à créer
    age_rec = 
      # Qui sera créee grâce à la fonction case_when
      case_when(
        # À gauche du "~", c'est la condition, à droite la valeur
        # Si agerev est strictement inférieur à 18, alors la variable prendra la valeur "Mineur.e"
        agerev < 18 ~ "Mineur.e",
        # Si agerev est strictement supérieur à 17 ET qu'agerev est strictement inférieur à 65, alors la variable prendra la valeur "Adulte"
        agerev > 17 & agerev < 65 ~ "Adulte",
         # Si agerev est strictement supérieur à 64, alors la variable prendra la valeur "Senior"
        agerev > 64 ~ "Senior"
        # Je ferme la parenthèse de la fonction case_when
      )
     # Je ferme la parenthèse de la fonction mutate
  )
```

### `fct`

Nous n'avons pas spécifié la nature de notre nouvelle colonne/vecteur. On cherche ici à créer un facteur puisqu'on a une variable catégorielle. La fonction `fct` permet de créer un vecteur et de spécifier l'ordre de ses modalités (quand on fera des tableaux ou des graphiques, on voudra que "Senior" apparaisse en dernier, et non entre "Mineur.e" et "Majeur.e"

```{r}
# Un vecteur de type texte qui renseigne la catégorie d'âge de 6 personnes
cat_age <- c("Mineur.e", 
             "Adulte", 
             "Adulte", 
             "Senior", 
             "Mineur.e",
             "Senior")
# Le tri croisé ne donne pas quelque chose d'intuitif :
table(cat_age)
# La catégorie adulte apparaît avant mineur.e
# On le transforme en facteur
cat_age <-
  fct(
    # Le premier argument, le facteur à transformer
    cat_age, 
      # Le deuxième argument, les modalités (levels) avec l'ordre d'apparition
      levels =  c("Mineur.e", "Adulte", "Senior")
      )
# Le problème est résolu
table(cat_age)
```

Finalement, la fonction `irec` permet de réaliser le recodage d'une variable catégorielle par le biais d'une interface. Elle vous permet de changer les modalités d'une variable, par exemple passer d'un codage numérique aux étiquettes en texte, en faisant appel à la fonction `fct_recode`. Elle n'est à lancer qu'une fois pour obtenir le code et peut être retirée par la suite.

```{r}
#| eval: false

# Recodage interactif de la variable sexe
irec(rp$sexe)
```

```{r}
## Recoding rp$sexe into rp$sexe_rec
rp$sexe_rec <- rp$sexe %>%
  as.character() %>%
  fct_recode(
    "Hommes" = "1",
    "Femmes" = "2"
  )
```

## Exercices

1.  Créez une variable catégorielle appelée `immigre` à deux modalités : Immigré/Non immigré

2.  Créez une variable catégorielle `stat_immi` à trois modalités : Immigré étranger/immigré français/français non immigré

```{r}

```

## Calculer des indicateurs dans des sous-groupes

Les opérations de comparaison d'indicateurs impliquent qu'il faille répéter le même calcul au sein de sous-groupes distincts. Deux fonctions permettront d'aboutir à un tel résultat.

### Summarize et .by

La fonction `summarize` permet d'obtenir un tableau synthétique qui recense le résultat d'opérations de calcul. Elle s'utilise avec l'argument `.by` qui définit dans quelles sous-populations le logiciel doit travailler : chez les hommes puis chez les femmes (distinguées par la variable `sexe`), par arrondissements (distingués par la variable `arm`) etc.

```{r}
# La moyenne d'âge des lyonnais·es
mean(rp$agerev)

# La fonction summarize sans groupes spécifiés par .by
summarize(rp, 
          age_m = mean(agerev))
# On obtient 1 seule ligne : la moyenne d'âge des lyonnais·es

# La fonction summarize avec groupes spécifiés par .by
summarize(rp, 
          age_m = mean(agerev),
          .by = sexe)
# On obtient 2 lignes : l'âge moyen des femmes et des hommes
```

L'argument `.by` peut aussi être un argument de la fonction `mutate`. On peut par exemple vouloir créer une colonne qui ajoute une variable à chaque individu renseignant la valeur prise par le sous-groupes. Par exemple, l'âge moyen dans le groupe définit par le sexe, pour ensuite faire l'écart entre l'âge de l'individu et l'âge moyen des personnes de même sexe.

```{r}
# Créer une colonne qui renseigne l'âge moyen dans le sous-groupe de sexe
rp <- 
  mutate(
    rp,
    age_m = mean(agerev),
    .by = sexe)

# Vérifier le résultat
rp$age_m


# Calculer la différence entre l'âge individuel et l'âge moyen dans le sous-groupe de sexe
rp <- 
  mutate(
    rp,
    dif_age_m = agerev - age_m)

# Vérifier le résultat
rp$dif_age_m
```

## Exercices

1.  Calculez l'âge moyen des immigré·es et des non-immigré·es
2.  Calculez l'âge moyen des immigré·es et des non-immigré·es selon le sexe
3.  Créez une colonne `age_immisexe` de l'âge moyen selon le statut d'immigration
4.  Créez une colonne qui fais la différence entre l'âge individuel et l'âge moyen `age_immisexe`

```{r}

```

# La visualisation de données avec ggplot2

## La logique additive de ggplot2

Le package `ggplot2` permet de faire l'essentiel de la représentation graphique des données. Il fonctionne selon une logique additive : on ajoute des couches par l'opérateur `+`

-   La fonction `ggplot` permet de déclarer les données sur lesquelles on va travailler.

-   Les fonctions de la forme `geom_` permettent de produire des graphiques. On indique les variables à utiliser à l'intérieur de la fonction `aes()`.

    -   Tout ce qui est indiqué à l'intérieur `aes()` implique qu'on fait un lien avec les données : compter les effectifs, calculer des moyennes, colorier selon la catégoriew etc.

    -   Tout ce qui est indiqué à l'extérieur d'`aes()` correspond à des paramètres indépendants des données : colorier toutes les barres en bleu, rendre semi-transparents les points du nuage de points

-   Des fonctions supplémentaires permettent finalement de paramétrer le graphique, ajouter des légendes et d'autres modifications.

## Une fonction par représentation

### Les diagrammes en barre

Les diagrammes en barres sont obtenus par le fonction `geom_bar`. Un graphique produit par `ggplot2` s'écrira donc sous cette forme :

```{r}
# Créons un diagramme en bâtons de la population des arrondissements lyonnais
ggplot(rp) +
  geom_bar(aes(x = arm))
```

### Cohérence entre les données, le type de graphique et le code

Le graphique ci-dessus est un exemple très commun des problèmes qui émergent quand on ne s'assure pas de la cohérence entre les données dont on dispose, le type de graphique qu'on construit et le code qu'on écrit. Il faut toujours régler les problèmes au fur et à mesure, c'est la seule façon d'isoler les problèmes et de les régler efficacement.

```{r}
# Dans la version précédente de ce code, la variable non recodée des arrondissements était utilisée
class(rp$arm)

# Les arrondissements sont considérés comme des valeurs numériques.
# Il faut les convertir en facteurs. Profitons-en pour recoder.
rp <-
  rp %>%
  mutate(
    arrondissements =
      fct(
        case_when(
          arm == 69381 ~ "1er",
          arm == 69382 ~ "2nd",
          arm == 69383 ~ "3e",
          arm == 69384 ~ "4e",
          arm == 69385 ~ "5e",
          arm == 69386 ~ "6e",
          arm == 69387 ~ "7e",
          arm == 69388 ~ "8e",
          arm == 69389 ~ "9e"
        ),
        levels = c("1er",
                   "2nd",
                   "3e",
                   "4e",
                   "5e",
                   "6e",
                   "7e",
                   "8e",
                   "9e")
        )
  )

# On vérifie notre recodage
levels(rp$arrondissements)

# Le graphique actualisé
ggplot(rp) +
  geom_bar(aes(x = arrondissements))
```

### Distinguer les paramètres liés aux variables et les paramètres indépendants

Il faut bien distinguer deux types de commandes données aux fonctions `geom_`. Celles à l'intérieur de `aes` vont interroger les données pour produire quelque chose : compter les effectifs des modalités d'une variable, différencier la coulour ou la forme des points selon les modalités d'une variable etc. Les arguments à l'extérieur de `aes` s'appliquent uniformément à tous les éléments du graphique.

### Exercices

1.  Recodez la variable `sexe` en facteur. La valeur 1 correspond aux hommes et 2 aux femmes. Faites en sorte que la modalité "Femme" soit la première modalité du nouveau facteur plutôt que l'inverse.
2.  Construisez un diagramme en barre de la population par arrondissement (variable `arrondissements`)
3.  Ajoutez l'argument `fill = "red"` dans la fonction `geom_` en dehors d'`aes()`
4.  Ajoutez l'argument `fill = sexe` dans la fonction `geom` à l'intérieur d'`aes()`

```{r}

```

### La pondération

L'argument `weight` permet de préciser la pondération à utiliser. Puisque la pondération intervient dans les calculs opérés par `ggplot`, on l'ajoute à l'intérieur d'`aes()` .

Il ne faut pas se soucier du message :

```         
The following aesthetics were dropped during statistical transformation: weights.
```

```{r}
# Diagramme en barres pondérées
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               weight = ipondi))
```

## Exercices - Les histogrammes

1.  Sachant que la fonction pour représenter des histogrammes (pour les variables quantitatives) est `geom_histogram` et que la variable de l'âge des individus rencensés est `agerev`, vérifiez que la variable d'âge est de la bonne classe d'objet et construisez un histogramme qui représente la distribution des âges.
2.  Ajoutez l'argument `bins = 10` dans la fonction `geom_histogram` et observez le résultat
3.  Ajoutez l'argument `binwidth = 1` dans la fonction `geom_histogram` et observez le résultat

```{r}

```

### La boîte à moustaches

La fonction `geom_boxplot` permet de construire des boîtes à moustaches. L'argument `x` détermine la variable numérique dont on veut connaître la distribution. L'argument `y`, optionnel, permet de comparer les distributions selon le sous-groupe défini par une variable catégorielle.

```{r}
# La distribution des âges selon l'arrondissement lyonnais
ggplot(rp) +
  geom_boxplot(
    aes(x = agerev,
        y = arrondissements)
  )
```

### Le nuage de points

La fonction `geom_point` peremt de construire des nuages de point. L'argument `x` détermine la variable représentée sur l'axe des abscisses et l'argument `y` celle sur l'axe des ordonnées. Ici, on opère d'abord un calcul d'indicateur par arrondissement : l'âge moyen et le nombre d'habitant·es.

```{r}
# Construire un tableau qui recense l'âge moyen et le nombre d'habitant·es
tab_arr <-
  summarize(rp,
            age_m = wtd.mean(agerev, weights = ipondi),
            # Ici, on fait la somme des poids mais on aurait écrit n() pour compter les effectifs non on'derés
            pop = sum(ipondi),
            .by = arrondissements) 

# On vérifie le tableau
tab_arr

# Construire le graphique
ggplot(tab_arr) +
  geom_point(
    aes(x = age_m, 
        y = pop)
    )
```

### Le nuage d'étiquettes ou de texte

Le graphique précédent ne permet pas d'identifier quel point correspond à quel arrondissement. Il faut pour cela utiliser les fonctions `geom_text` et `geom_label`, avec un nouvel argument : `label = ...`

```{r}
# Nuage de texte
ggplot(tab_arr) +
  geom_text(
    aes(x = age_m, 
        y = pop,
        label = arrondissements)
    )

# Nuage d'étiquettes
ggplot(tab_arr) +
  geom_label(
    aes(x = age_m, 
        y = pop,
        label = arrondissements)
    )
```

## Des paramètres pour croiser les variables

### `fill` et `color`

Il est possible de lier les paramètres des éléments du graphique (taille, couleur, opacité) à la valeur d'une varialbe. C'est ce qui permet de croiser visuellement des variables. Les arguments `fill` et `color` permettent par exemple de colorier les contours ou l'intérieur selon la catégorie.

```{r}
# L'intérieur colorié
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe))

# Les contours coloriés
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               color = sexe))
```

Les paramètres `size` et `alpha` pour la taille et la transparence peuvent vous être utiles pour des représentations comme les nuages de points. Ils ne sont pas présentés plus en détail ici.

### La position

L'argument `position` permet de spécifier la disposition des barres. Elle permet de mener des comparaison inter et intragroupes par comparaison de hauteur. `= dodge` permet de mettre les barres côte à côte, `= stack` de les empiler (valeur par défaut) et `= fill` de representer les parts.

```{r}
# Dodge
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe),
           position = "dodge")

# Stack
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe),
           position = "stack")

# Fill
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe),
           position = "fill")
```

## Modifier les légendes et les axes

Il reste à légender correctement notre graphique et potentiellement transformer ses axes.

### `labs`

La fonction `labs` permet de spécifier en un coup la quasi-totalité des légendes d'un graphique.

```{r}
# Légender
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe,
               weights = ipondi),
           position = "dodge") +
  labs(
    title = "Population par arrondissement selon le genre",
    y = "Nombre d'habitant·es",
    x = "Arrondissement",
    caption = "Source : recensement de la population 2017 (INSEE) | A. POISSONNIER | 2024"
  )
```

### `scale_`

Les fonctions `scale_` permettent finalement de transformer les axes et leurs étiquettes. Elles s'écrivent : - En spécifiant la dimension ciblée (axes x et y, fill, color, alpha etc.) - La nature de l'échelle (continuous, discrete etc.)

```{r}
# Légender et changer le nom de la légende des couleurs
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe,
               weights = ipondi),
           position = "dodge") +
  labs(
    title = "Population par arrondissement selon le genre",
    y = "Nombre d'habitant·es",
    x = "Arrondissement",
    caption = "Source : recensement de la population 2017 (INSEE) | A. POISSONNIER | 2024"
  ) +
  scale_fill_discrete("Sexe")
```

Elles permet par ailleurs de changer la couleur, automatiquement en changeant de palette ou manuellement en spécifiant des valeurs. On peut notamment se référer aux couleurs du package `RColorBrewer`. Il faut alors utiliser les fonctions `scale_color_brewer` et `scale_fill_brewer`.

```{r}
# Afficher toutes les palettes de couleur
# On appelle ici la fonction sans avoir préalablement hargé le package avec library, d'où le RColorBrewer::
RColorBrewer::display.brewer.all()
```

```{r}
# Automatiquement, en choissisant la Palette "Set1"
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe,
               weight = ipondi),
           position = "dodge") +
  labs(
    title = "Population par arrondissement selon le genre",
    y = "Nombre d'habitant·es",
    x = "Arrondissement",
    caption = "Source : recensement de la population 2017 (INSEE) | A. POISSONNIER | 2024"
  ) +
  scale_fill_brewer("Sexe",
                    palette = "Set1")

# Manuellement en créant un vecteur nommé
couleurs_sexe <- 
  c("Homme" = "#ffffbf",
    "Femme" = "#d7191c")

# Puis avec la version manual de la fonction scale
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe,
               weight = ipondi),
           position = "dodge") +
  labs(
    title = "Population par arrondissement selon le genre",
    y = "Nombre d'habitant·es",
    x = "Arrondissement",
    caption = "Source : recensement de la population 2017 (INSEE) | A. POISSONNIER | 2024"
  ) +
  scale_fill_manual("Sexe",
                    values = couleurs_sexe)

```

### `theme` et `theme_`

Les fonctions `theme` et `theme_` permettent de choisir des modèles graphiques et paramètrer des éléments.

```{r}
# Passer en thème blanc et noir et mettre la légende en bas
ggplot(rp) +
  geom_bar(aes(x = arrondissements,
               fill = sexe,
               weight = ipondi),
           position = "dodge") +
  labs(
    title = "Population par arrondissement selon le genre",
    y = "Nombre d'habitant·es",
    x = "Arrondissement",
    caption = "Source : recensement de la population 2017 (INSEE) | A. POISSONNIER | 2024"
  ) +
  scale_fill_manual("Sexe",
                    values = couleurs_sexe) +
  theme_bw() +
  theme(legend.position = "bottom")
```
