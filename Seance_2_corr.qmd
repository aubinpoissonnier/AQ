---
title: "Séance 2"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false

library(questionr)
library(tidyverse)

download.file("https://vico.hypotheses.org/files/2021/03/vico2020.csv",
              "vico.csv")
vico <- read_csv2("vico.csv")


data("hdv2003")

rp <- aws.s3::s3read_using(FUN = data.table::fread,
                           object = "/diffusion/RP/rplyon_2017.csv",
                           bucket = "aubinpoissonnier",
                           opts = list("region" = ""))
```

# Compter avec des variables catégorielles

Vous travaillez ici avec les données du recensement anonymisées, publiées sous forme d'un fichier comportant une ligne par individu. La base `rp` correspond au recensement de 2017 pour la ville de Lyon. Le dictionnaire des codes est disponible à [cette adresse](https://www.insee.fr/fr/statistiques/4802064?sommaire=4508161#dictionnaire).

## Tri à plat et tri croisé

### Compter les effectifs absolus

La fonction `table` fait partie des fonctions intégrées au R de base. Elle permet de réaliser des tris à plat sur un vecteur et des tris croisés sur deux vecteurs.

Le tableau `rp` contient une colonne `sexe` qui correspond à la variable qui vaut 1 si l'individu recensé est un homme et 2 si l'individu est une femme. On peut compter le nombre d'hommes et de femmes :

```{r}
table(rp$sexe)
```

On peut aussi connaître le nombre de personnes en couple grâce à la colonne `couple`

```{r}
table(rp$couple)
```

Quand les données sont livrées avec des poids d'échantillonnage, on peut utiliser la fonction `wtd.table` pour calculer des effectifs pondérés.

```{r}
wtd.table(rp$sexe, weights = rp$ipondi)
```

### Calculer les pourcentages

Souvent, on cherche plutôt à obtenir des pourcentages que des effectifs absolus. La fonction `proportions` permet de calculer la part associée chaque modalité de la variable. Elle s'applique à l'objet créé par la fonction `table`.

La part d'hommes/de femmes dans la population du département du Rhône

```{r}
tab_sexe <- wtd.table(rp$sexe, weights = rp$ipondi)
proportions(tab_sexe)
```

La part de personnes en couple

```{r}
tab_couple <- wtd.table(rp$couple, weights = rp$ipondi)
proportions(tab_couple)
```

On peut encore modifier ce tableau pour faciliter la lecture, par exemple en convertissant cette proportion en pourcentages

```{r}
# En décomposant ligne par ligne
tab_sexe <- wtd.table(rp$sexe, weights = rp$ipondi)
tab_sexe <- proportions(tab_sexe)
tab_sexe <- tab_sexe*100
tab_sexe <- round(tab_sexe, 2)
tab_sexe

# En cumulant les fonctions
tab_sexe <- proportions(wtd.table(rp$sexe, weights = rp$ipondi))
tab_sexe <- round(tab_sexe*100, 2)
tab_sexe
```

### Croiser des variables

Pour croiser deux variables, il suffit d'ajouter la deuxième colonne comme deuxième argument. La part d'hommes et de femmes en couple :

```{r}
tab_sexe_couple <- wtd.table(rp$sexe, rp$couple, weights = rp$ipondi)
tab_sexe_couple
```

Pour les tableaux croisés, les fonctions `lprop` et `cprop` du package `questionr` permettent d'obtenir très facilement les pourcentages en ligne ou en colonne ainsi que les marges.

```{r}
rprop(tab_sexe_couple)
cprop(tab_sexe_couple)
```

## Exercices

1.  Déterminez la part de la population qui est étudiante (= lyonnais·es qui sont inscrit·es dans un établissement d'enseignement supérieur)

```{r}
# On calcul les effectifs avec un tri à plat
tab_etud <- wtd.table(rp$etud, weights = rp$ipondi)
# Puis la proportion
proportions(tab_etud)
```

2.  Déterminez pour les hommes et pour les femmes la part d'étudiant·es

```{r}
# On calcul les effectifs avec un tri croisé
tab_etud <- wtd.table(rp$sexe, rp$etud, weights = rp$ipondi)
# Puis la proportion
rprop(tab_etud)
```

3.  Déterminez la part de femmes et d'hommes chez les étudiant·es et chez les non étudiant·es

```{r}
# On calcul les effectifs avec un tri croisé en inversant les variables
tab_etud <- wtd.table(rp$etud, rp$sexe, weights = rp$ipondi)
# Puis la proportion
rprop(tab_etud)
```

# Tests et comparaison {#sec-tests}

L'essentiel du recodage s'opère avec des instructions logiques simples (égal, différent, inférieur ou supérieur à) que l'on peut combiner sur une variable ou plusieurs variables). On utilise pour cela des tests.

Un test est une opération logique de comparaison qui renvoie vrai (`TRUE`) ou faux (`FALSE`) pour chacun des éléments d'un vecteur.

Parmi les opérateurs de comparaison disponibles, on trouve notamment :

-   `==` qui teste l'égalité
-   `!=` qui teste la différence
-   `>`, `<`, `<=`, `>=` qui testent la supériorité ou l'infériorité
-   `%in%` qui teste l'appartenance à un ensemble de valeurs

Exemple le plus simple :

```{r}
2 == 3
```

```{r}
2 != 3
```

Exemple appliqué à un vecteur :

```{r}
x <- 1:10
x < 5
```

On peut combiner plusieurs tests avec les opérateurs logiques *et* (`&`) et *ou* (`|`). Ainsi, si on veut tester qu'une valeur est comprise entre 3 et 6 inclus, on peut faire :

```{r}
x >= 3 & x <= 6
```

Si on veut tester qu'une valeur est égale à "Bleu" ou à "Vert", on peut faire :

```{r}
vec <- c("Jaune", "Jaune", "Rouge", "Vert")
vec == "Jaune" | vec == "Vert"
```

À noter que dans ce cas, on peut utiliser l'opérateur `%in%`[^1], qui teste si une valeur fait partie des éléments d'un vecteur :

[^1]: Pour accéder à la page de documentation de fonctions comme `%in%`, on ne peut pas utiliser `?%in%`, qui renvoie une erreur. Vous pouvez faire `?"%in%"`, `help("%in%")` ou, dans ce cas, `?match`, car les deux fonctions sont documentées sur la même page d'aide.

```{r}
vec %in% c("Jaune", "Vert")
```

::: callout-warning
Attention, si on souhaite tester si une valeur `x` est inconnue (ou 'manquante'), c'est-à-dire si elle est codée `NA` (*Not Available*), faire le test `x == NA` *ne donnera pas le résultat escompté*. En effet, fidèle à sa réputation de rigueur informaticienne, pour R `NA == NA` ne vaut pas `TRUE` mais... `NA` (on ne sait pas si une valeur inconnue est égale à une autre valeur inconnue).

Pour tester si une valeur est inconnue (`NA`), il faut utiliser la fonction dédiée `is.na` et faire `is.na(x)`.

Cependant, par convention, `NA %in% NA` vaut `TRUE`.
:::

Enfin, on peut inverser un test avec l'opérateur *non* (`!`) :

```{r}
!(vec %in% c("Jaune", "Vert"))
```

## Exercices

Appliquez un test sur les habitant·es de Lyon qui vérifie si ils et elles sont :

1.  Immigré·es
2.  Immigré·es et majeur·es
3.  Immgré·es marié·es ou pacsé·es
4.  Immigré·es français·es marié·es ou pacsé
5.  Immigré·es français marié·es ou immigré·es étranger·es pacsé·es
6.  Immigré·es pas propriétaires

```{r}
# 1
rp$immi == 1

# 2
rp$immi == 1 & 
  rp$agerev > 17

# 3 
rp$immi == 1 &
  rp$stat_conj %in% 1:2

# 4
rp$immi == 1 &
  rp$stat_conj %in% 1:2 &
  rp$inatc == 1

# 5
(rp$immi == 1 &
  rp$stat_conj == 1 &
    rp$inatc == 1) |
  (rp$immi == 1 &
  rp$stat_conj == 2 &
  rp$inatc == 2)

# 6
rp$immi == 1 &
  rp$stocd != 10
```

# Le tidyverse

Le terme *tidyverse* est une contraction de *tidy* (qu'on pourrait traduire par "bien rangé") et de *universe*. Il s'agit en fait d'une collection d'extensions conçues pour travailler ensemble et basées sur une philosophie commune :

-   `ggplot2` (visualisation)
-   `dplyr` (manipulation des données)
-   `tidyr` (remise en forme des données)
-   `purrr` (programmation)
-   `readr` (importation de données)
-   `tibble` (tableaux de données)
-   `forcats` (variables qualitatives)
-   `stringr` (chaînes de caractères)
-   `lubridate` (manipulation de dates)

Un des objectifs de ces extensions est de fournir des fonctions avec une syntaxe cohérente, qui fonctionnent bien ensemble, et qui retournent des résultats prévisibles. Nous allons recourrir à cette syntaxe pour transformer nos données.

## Filtrer des lignes et sélectionner des colonnes

### `filter`

`filter` sélectionne des lignes d'une table selon une condition. On lui passe en paramètre un test, et seules les lignes pour lesquelles ce test renvoie `TRUE` (vrai) sont conservées. On réutilise donc les opérateurs logiques vus dans le cas des tests. Puisque le premier argument est le tableau en lui-même, il n'est plus nécessaire d'utiliser l'opérateur `$` et il suffit d'utiliser le nom dans colonnes pour filter.

```{r}
# Filtre pour sélectionner les femmes
rp_f <- filter(rp, sexe == 2)

# Filtre pour sélectionner les femmes immigrées
rp_f <- filter(rp, sexe == 2 & immi == 1)
```

On peut également placer des fonctions dans les tests, qui nous permettent par exemple de sélectionner les personnes qui sont plus âgées que l'âge médian.

```{r}
rp_senior <- filter(rp, agerev > median(agerev))
```

### `select`

`select` permet de sélectionner des colonnes d'un tableau de données.

```{r}
# Sélectionner uniquement les colonnes du sexe et de l'âge
select(rp, sexe, agerev)
```

Si on fait précéder le nom d'un `-`, la colonne est éliminée plutôt que sélectionnée :

```{r}
# Sélectionner toutes les colonnes sauf le sexe et l'âge
select(airports, -sexe, -age)
```

## Créer une colonne et recoder sous conditions

### `mutate`

La fonction `mutate` permet de créer une nouvelle colonne. C'est une alternative à la méthode de base avec l'opétaeur \$. Le premier type de recodage consiste à changer la nature d'une colonne. On vérifie la nature d'une colonne avec la fonction `class` et on peut la modifier avec les fonctions de la forme `as.nature_désirée` : `as.integer`, `as.character` etc.

```{r}
# Vérifier la nature de la variable
class(rp$agerev)

# On transforme cette colonne en format texte
# Ancienne solution avec l'opérateur $
rp$agerev_txt <- as.character(rp$agerev)
class(rp$agerev_txt)

# Nouvelle solution avec la fonction mutate
# Attention : on transforme le tableau de données, plus seulement une colonne
# À nouveau, on fait directement référence au nom des colonnes
rp <-
  mutate(
    # Le premier argument est le tableau à modifié
    rp,
    # Le deuxième la variable à créer : son nom puis son contenu
    agerev_txt = as.character(agerev)
  )
```

### `if_else`

La fonction `if_else` permet de faire une action sous condition : si l'âge est supérieur à 18, donne la valeur "majeur.e", sinon donne la valeur "mineur.e". case_when étend ce fonctionnement à plus d'une possibilité : si l'âge est supérieur à 18 donne "majeur.e", si l'âge est compris entre 18 et 64 donne "adulte", si l'âge est supérieur à 64 donne "senior".

On pourra dire à R : crée une nouvelle colonne (`mutate`) à partir d'un test sur la valeur initiale de la variable (`if_else`).

```{r}
# Voici deux versions du codage de l'âge des personnes recensées, soit la variable agerev. La première est lisible, la deuxième est commentée ligne par ligne.

# Version plus lisible sans les commentaires
rp <- mutate(
  rp,
  age_rec = 
    if_else(
      agerev > 17,
      "Majeur.e",
      "Mineur.e"
    )
)

# Version commentée
rp <-
  # J'utilise la fonction mutate pour créer une colonne
  mutate(
    # Le premier argument de mutate, le tableau à transformer
    rp,
    # Le deuxième argument de mutate, le nom de la colonne à créer (à gauche du =) et la valeur que je lui donne (à droite du =)
    age_rec = 
      # Elle sera créée à l'aide du test opérée par la fonction ifelse
      if_else(
        # Le premier argument de ifelse, la condition
        agerev > 17,
        # Le deuxième argument de ifelse, la valeur à donner si la condition est vérifiée
        "Majeur.e", 
        # Le troisième argument de ] ifelse, la valeur à donner si la condition n'est pas vérifié
        "Mineur.e"
        # Je ferme la parenthèse de la fonction if_else
      )
    # Je ferme la parenthèse de la fonction mutate
  ) 

# On obtient bien une nouvelle variable/colonne nommée age_rec qui prend soit la valeur "Mineur.e", soit la valeur "Majeur.e"
```

### `case_when`

Dès qu'on veut utiliser plus d'un test (par exemple, obtenir trois valeurs : mineur.e, adulte, senior), il faut utiliser la fonction case_when.

```{r}
# Version lisible
rp <- 
  mutate(
  rp,
  age_rec =
    case_when(
      agerev < 18 ~ "Mineur.e",
      agerev > 17 & agerev < 65 ~ "Adulte",
      agerev > 64 ~ "Senior"
    )
)


# Version commentée
rp <-
  # Je crée une variable grâce à la fonction mutat
  mutate(
    # Le premier argument, je transforme le tableau rp
    rp,
    # Le deuxième argument, la variable à créer
    age_rec = 
      # Qui sera créee grâce à la fonction case_when
      case_when(
        # À gauche du "~", c'est la condition, à droite la valeur
        # Si agerev est strictement inférieur à 18, alors la variable prendra la valeur "Mineur.e"
        agerev < 18 ~ "Mineur.e",
        # Si agerev est strictement supérieur à 17 ET qu'agerev est strictement inférieur à 65, alors la variable prendra la valeur "Adulte"
        agerev > 17 & agerev < 65 ~ "Adulte",
         # Si agerev est strictement supérieur à 64, alors la variable prendra la valeur "Senior"
        agerev > 64 ~ "Senior"
        # Je ferme la parenthèse de la fonction case_when
      )
     # Je ferme la parenthèse de la fonction mutate
  )
```

### `fct`

Nous n'avons pas spécifié la nature de notre nouvelle colonne/vecteur. On cherche ici à créer un facteur puisqu'on a une variable catégorielle. La fonction `fct` permet de créer un vecteur et de spécifier l'ordre de ses modalités (quand on fera des tableaux ou des graphiques, on voudra que "Senior" apparaisse en dernier, et non entre "Mineur.e" et "Majeur.e"

```{r}
# Un vecteur de type texte qui renseigne la catégorie d'âge de 6 personnes
cat_age <- c("Mineur.e", 
             "Adulte", 
             "Adulte", 
             "Senior", 
             "Mineur.e",
             "Senior")
# Le tri croisé ne donne pas quelque chose d'intuitif :
table(cat_age)
# La catégorie adulte apparaît avant mineur.e
# On le transforme en facteur
cat_age <-
  fct(
    # Le premier argument, le facteur à transformer
    cat_age, 
      # Le deuxième argument, les modalités (levels) avec l'ordre d'apparition
      levels =  c("Mineur.e", "Adulte", "Senior")
      )
# Le problème est résolu
table(cat_age)
```

Finalement, la fonction `irec` permet de réaliser le recodage d'une variable catégorielle par le biais d'une interface. Elle vous permet de changer les modalités d'une variable, par exemple passer d'un codage numérique aux étiquettes en texte, en faisant appel à la fonction `fct_recode`. Elle n'est à lancer qu'une fois pour obtenir le code et peut être retirée par la suite.

```{r}
#| eval: false

# Recodage interactif de la variable sexe
irec(rp$sexe)

## Recoding rp$sexe into rp$sexe_rec
rp$sexe_rec <- rp$sexe %>%
  as.character() %>%
  fct_recode(
    "Hommes" = "1",
    "Femmes" = "2"
  )
```

## Exercices

1.  Créez une variable catégorielle appelée `immigre` à deux modalités : Immigré/Non immigré

2.  Créez une variable catégorielle `stat_immi` à trois modalités : Immigré étranger/immigré français/français non immigré

```{r}
# 1
rp <-
  mutate(
    rp,
    immigre = 
      fct(
        if_else(immi == 1, "Immigré", "Non immigré"),
        levels = c("Immigré", "Non immigré")
  )
  )
names(rp)

# 2
rp <-
  mutate(
    rp,
    stat_immi =
      fct(
        case_when(
          immi == 1 & inatc == 2 ~ "Immigré étranger",
          immi == 1 & inatc == 1 ~ "Immigré français",
          immi == 2 ~ "Français non immigré"
        ),
        levels = c("Immigré étranger",
                   "Immigré français",
                   "Français non immigré")
      )
  )
```

# La visualisation de données avec ggplot2 - La logique additive

```{r}
hdv2003 <- 
  hdv2003 |>
  mutate(
    cat_age =
      fct(
        case_when(
          age < 30 ~ "Moins de 30 ans",
          age %in% 30:44 ~ "30 à 44 ans",
          age %in% 45:64 ~ "45 à 64 ans",
          age > 64 ~ "65 ans et plus"
        ),
        levels =
          c("Moins de 30 ans",
            "30 à 44 ans",
            "45 à 64 ans",
            "65 ans et plus")
      ),
    occup = fct(
      case_when(
        occup == "Retire des affaires" ~ "Retraite",
        occup == "Au foyer" ~ "Autre inactif",
        occup == "Chomeur" ~ "Actif",
        occup == "Exerce une profession" ~ "Actif",
        occup == "Etudiant, eleve" ~ "Étudiant",
        TRUE ~ occup)
    )
  )
```

### La logique additive - Les variable catégorielles

Le package `ggplot2` permet de faire l'essentiel de la représentation graphique des données. Il fonctionne selon une logique additive de couches additionnées par l'opérateur `+`

-   La fonction `ggplot` permet de déclarer les données sur lesquelles on va travailler.

-   Les fonctions de la forme `geom_` permettent de produire des graphiques. On indique les variables à utiliser à l'intérieur de la fonction `aes()`.

-   D'autres fonctions permettent de paramétrer le graphique, ajouter des légendes et d'autres modifications.

```{r}
# Créons un diagramme en bâtons de la population des arrondissements lyonnais
ggplot(rp) +
  geom_bar(aes(x = ))

rp$arm
```

### Cohérence entre les données, le type de graphique et le code

Le graphique ci-dessus est un exemple très commun des problèmes qui émergent quand on ne s'assure pas de la cohérence entre les données dont on dispose, le type de graphique qu'on construit et le code qu'on écrit. Il faut toujours régler les problèmes au fur et à mesure, c'est la seule façon d'isoler les problèmes et de les régler efficacement.

```{r}
# Dans la version précédente de ce code, la variable non recodée des arrondissements était utilisée
class(rp19$ARM)
# Les arrondissements sont considérés comme des valeurs numériques.
# Il faut les convertir en facteurs. Profitons-en pour recoder.
rp19 <-
  rp19 %>%
  mutate(
    arrondissements =
      fct(
        case_when(
          ARM == 69381 ~ "1er",
          ARM == 69382 ~ "2nd",
          ARM == 69383 ~ "3e",
          ARM == 69384 ~ "4e",
          ARM == 69385 ~ "5e",
          ARM == 69386 ~ "6e",
          ARM == 69387 ~ "7e",
          ARM == 69388 ~ "8e",
          ARM == 69389 ~ "9e"
        ),
        levels = c("1er",
                   "2nd",
                   "3e",
                   "4e",
                   "5e",
                   "6e",
                   "7e",
                   "8e",
                   "9e")
        )
  )

# On vérifie notre recodage
levels(rp19$arrondissements)

# Le graphique actualisé
ggplot(rp19) +
  geom_bar(aes(x = arrondissements))
```

Sachant que la fonction pour représenter des histogrammes (pour les variables quantitatives) est `geom_histogram` et que la variable de l'âge des individus rencensés est `AGEREV`, vérifiez que la variable d'âge est de la bonne classe d'objet et construisez un histogramme qui représente la distribution des âges.

```{r}
class(rp19$AGEREV)
ggplot(rp19) +
  geom_histogram(aes(x = AGEREV))
```

### Distinguer les paramètres liés aux variables et les paramètres indépendants

Il faut bien distinguer deux types de commandes données aux fonctions `geom_`. Celles à l'intérieur de `aes` vont interroger les données pour produire quelque chose : compter les effectifs des modalités d'une variable, différencier la coulour ou la forme des points selon les modalités d'une variable etc. Les arguments à l'extérieur de `aes` s'appliquent uniformément à tous les éléments du graphique.

Avant de le montrer en graphique, recodez la variable `SEXE` en facteur. La valeur 1 correspond aux hommes et 2 aux femmes. Faites en sorte que la modalité "Femme" soit la première modalité du nouveau facteur plutôt que l'inverse.

```{r}
rp19 <-
  rp19 %>%
  mutate(
    SEXE = 
      fct(
        ifelse(SEXE == 1, "Homme", "Femme"),
        levels = c("Femme", "Homme"))
  )
```

```{r}
ggplot(rp19) +
  geom_bar(aes(x = arrondissements),
           fill = "red")
ggplot(rp19) +
  geom_bar(aes(x = arrondissements,
               fill = SEXE))
ggplot(rp19) +
  geom_bar(aes(x = arrondissements,
               fill = SEXE,
               weight = IPONDI))

ggplot(rp19) +
  geom_bar(aes(x = arrondissements,
               fill = IMMI,
               weight = IPONDI))
```

### Les variables catégorielles à plus de deux modalités

Représentez la population de chaque arrondissement et sa composition socio-professionnelle en excluant les agriculteur.ices, les retraité.es et les inacti.f.ves.

| Code | Modalité                                          |
|------|---------------------------------------------------|
| 1    | Agriculteurs exploitants                          |
| 2    | Artisans, commerçants et chefs d'entreprise       |
| 3    | Cadres et professions intellectuelles supérieures |
| 4    | Professions Intermédiaires                        |
| 5    | Employés                                          |
| 6    | Ouvriers                                          |
| 7    | Retraités                                         |
| 8    | Inactifs                                          |

: Dictionnaire des codes de la variable CS1

```{r}
rp19 <-
  rp19 %>%
  mutate(
    csp =
      fct(
        case_when(
          CS1 == 1 ~ "Agriculteurs exploitants",
          CS1 == 2 ~ "Artisans, commerçants et chefs d'entreprise",
          CS1 == 3 ~ "Cadres et professions intellectuelles supérieures",
          CS1 == 4 ~ "Professions intermédiaires",
          CS1 == 5 ~ "Employés",
          CS1 == 6 ~ "Ouvriers",
          CS1 == 7 ~ "Retraités",
          CS1 == 8 ~ "Inactifs"),
        levels = c("Agriculteurs exploitants",
                   "Artisans, commerçants et chefs d'entreprise",
                   "Cadres et professions intellectuelles supérieures",
                   "Professions intermédiaires",
                   "Employés",
                   "Ouvriers",
                   "Retraités",
                   "Inactifs")
      )
  )

rp19 %>%
  filter(!(csp %in% c("Agriculteurs exploitants", 
                      "Retraités",
                      "Inactifs"))) %>%
  ggplot() +
  geom_bar(aes(x = arrondissements,
               fill = csp,
               weight = IPONDI))
```

### Modifier le texte et les légendes

Il faut ensuite ajouter tous les éléments nécessaires à la bonne lecture d'un graphique. On choisit des couleurs à l'aide du site [ColorBrewer](https://colorbrewer2.org/).

```{r, fig.height=6, fig.width=8}
# Je créer un vecteur nommé, c'est-à-dire que je donne un nom à chacune des valeurs.
couleurs_csp <-
  c("Artisans, commerçants et chefs d'entreprise" = "#ffffbf",
    "Cadres et professions intellectuelles supérieures" = "#d7191c",
    "Professions intermédiaires" = "#fdae61",
    "Employés" = "#abd9e9",
    "Ouvriers" = "#2c7bb6")

# Je construis mon graphique en filtrant d'abord les données
graph <- filter(rp19, !(csp %in% c("Agriculteurs exploitants", 
                      "Retraités",
                      "Inactifs"))) %>%
  ggplot() +
  geom_bar(aes(x = arrondissements,
               fill = csp,
               weight = IPONDI))

graph +
  # Je rajoute les légendes
  labs( # Fonction qui permet de définir les titres et textes
    title = "Population et composition socio-professionnelle des arrondissements lyonnais en 2019",
    x = "Arrondissement",
    y = "Effectifs",
    fill = "Catégorie socio-professionnelle",
    caption = 
    "Champ : actif.ves sauf agriculteur.ices
    Lecture : en 2019, il y avait 18 000 habitant.es dans le premier arrondissement de Lyon.
    La majorité des habitant.es appartiennent à la catégorie des cadres et des professions intellectuelles supérieures
    Recensement de la population 2019 | A. POISSONNIER | 2023") +
  # Je change les couleurs et le thème graphique
  scale_fill_manual(values = couleurs_csp,
                    labels = scales::label_wrap(30)) + 
  theme_minimal() +
  theme(legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 3,
                             byrow = T))
```

# La visualisation de données avec ggplot2 - Choisir la représentation adéquate

### Changer la position des barres superposées

La lisibilité d'un graphique et le risque qu'il amène des erreurs d'interprétation est très différent selon la façon dont on représente l'information.

```{r, fig.height=6, fig.width=8}
# Je créer un vecteur nommé, c'est-à-dire que je donne un nom à chacune des valeurs.
couleurs_csp <-
  c("Artisans, commerçants et chefs d'entreprise" = "#ffffbf",
    "Cadres et professions intellectuelles supérieures" = "#d7191c",
    "Professions intermédiaires" = "#fdae61",
    "Employés" = "#abd9e9",
    "Ouvriers" = "#2c7bb6")

# Je construis mon graphique en filtrant d'abord les données
graph <- filter(rp19, !(csp %in% c("Agriculteurs exploitants", 
                      "Retraités",
                      "Inactifs"))) %>%
  ggplot() +
  geom_bar(aes(x = arrondissements,
               fill = csp,
               weight = IPONDI),
           position = "dodge")

# Je rajoute les légendes
graph +
  labs( # Fonction qui permet de définir les titres et textes
    title = "Population et composition socio-professionnelle des arrondissements lyonnais en 2019",
    x = "Arrondissement",
    y = "Effectifs",
    fill = "Catégorie socio-professionnelle",
    caption = 
    "Champ : actif.ves sauf agriculteur.ices
    Lecture : en 2019, il y avait 18 000 habitant.es dans le premier arrondissement de Lyon.
    La majorité des habitant.es appartiennent à la catégorie des cadres et des professions intellectuelles supérieures
    Recensement de la population 2019 | A. POISSONNIER | 2023") +
  # Je change les couleurs et le thème graphique
  scale_fill_manual(values = couleurs_csp,
                    labels = scales::label_wrap(30)) + 
  theme_minimal() +
  theme(legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 3,
                             byrow = T))
```

### Représenter des distributions en pourcentages

```{r, fig.height=6, fig.width=8}
# Je créer un vecteur nommé, c'est-à-dire que je donne un nom à chacune des valeurs.
couleurs_csp <-
  c("Artisans, commerçants et chefs d'entreprise" = "#ffffbf",
    "Cadres et professions intellectuelles supérieures" = "#d7191c",
    "Professions intermédiaires" = "#fdae61",
    "Employés" = "#abd9e9",
    "Ouvriers" = "#2c7bb6")

# Je construis mon graphique en filtrant d'abord les données
graph <- 
  rp19 %>%
  filter(!(csp %in% c("Agriculteurs exploitants", 
                      "Retraités",
                      "Inactifs"))) %>%
  count(arrondissements, csp, wt = IPONDI) %>%
  group_by(arrondissements) %>%
  mutate(p = n/sum(n)) %>%
  ggplot() +
  geom_bar(aes(x = arrondissements,
               y = p,
               fill = csp),
           position = "dodge",
           stat = "identity")

# Je rajoute les légendes
graph +
  labs( # Fonction qui permet de définir les titres et textes
    title = "Population et composition socio-professionnelle des arrondissements lyonnais en 2019",
    x = "Arrondissement",
    y = "Part (en %)",
    fill = "Catégorie socio-professionnelle",
    caption = 
    "Champ : actif.ves sauf agriculteur.ices
    Lecture : en 2019, 39% des habitant.es du premier arrondissement de Lyon appartenaient à la catégorie cadres et professions intellectuelles supérieures.
    Recensement de la population 2019 | A. POISSONNIER | 2023") +
  # Je change les couleurs et le thème graphique
  scale_fill_manual(values = couleurs_csp,
                    labels = scales::label_wrap(30)) + 
  scale_y_continuous(labels = scales::percent) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 3,
                             byrow = T))
```

## La visualisation de données avec ggplot2 - les variables numériques

### Les distributions à l'aide des boîtes à moustache

Créez des boîtes à moustache à l'aide de la fonction `geom_boxplot` qui représente la distribution de l'âge en fonction de la variable `IMMI`. N'utilisez pas les poids cette fois-ci.

```{r}
rp19 %>%
  ggplot() +
  geom_boxplot(aes(x = AGEREV,
                   y = IMMI))

rp19 %>%
  ggplot() +
  geom_boxplot(aes(y = AGEREV,
                   x = IMMI))
```

### Combiner plusieurs graphiques

On souhaite parfois réaliser la même opération de visualisation mais le représenter dans des graphiques différents. Cela permet de distinguer les niveaux d'analyse à plus de deux dimensions. Il faut pour cela utiliser les fonctions `facet_`

```{r}
# Reproduire la comparaison des âges à 2 recensements mis côte-à-côte
rp %>%
  ggplot() +
  geom_boxplot(aes(y = AGEREV,
                   x = IMMI)) +
  facet_wrap(vars(annee))

# On peut même créer des grilles avec plus d'un croisement
rp %>%
  ggplot() +
  geom_boxplot(aes(y = AGEREV,
                   x = IMMI)) +
  facet_grid(vars(SEXE), vars(annee))
```

### Transformer des données numériques avant de les représenter

Nous avons déjà vu que les verbes de dplyr tel `mutate` changeaient leur fonctionnement si un groupement avait été annoncé avec `group_by`. Les variables `NBPI` et `NPERR` représentent respectivement le nombre de pièces et le nombre de personnes dans le logement habité par la personne recensée. La variable `LPRM` prend la valeur 1 quand la personne recensée est la personne de référence du logement. Créez une nouvelle colonne sur le tableau du recensement de 2019 du nombre de pièces et de personnes moyens par arrondissement. La fonction `weighted.mean` qui prend les arguments `x` pour le vecteur et `w` pour les poids vous permettra de tenir compte de la pondération.

```{r }
rp19 %>%
  filter(LPRM == 1) %>%
  group_by(arrondissements) %>%
  mutate(moy_NBPI = weighted.mean(x= NBPI, w = IPONDI),
         moy_NPERR = mean(x = NPERR, w = IPONDI))
```

### La fonction `summarize`

La fonction `summarize` permet de résumer cette information de groupe en un tableau synthétique.

```{r}
rp19 %>%
  filter(LPRM == 1) %>%
  group_by(arrondissements) %>%
  summarize(moy_NBPI = weighted.mean(x= NBPI, w = IPONDI),
         moy_NPERR = weighted.mean(x = NPERR, w = IPONDI))
```

Représentez graphiquement cette information à l'aide de la fonction `geom_point` qui crée un nuage de points.

```{r}
rp19 %>%
  filter(LPRM == "1") %>% # La personne de référence du ménage
  group_by(arrondissements) %>%
  summarize(moy_NBPI = weighted.mean(x = NBPI, w = IPONDI),
            moy_NPERR = weighted.mean(x = NPERR, w = IPONDI)) %>%
  ggplot() + 
  geom_point(
    aes(x = moy_NBPI,
        y = moy_NPERR))
```

Associez les points dans le plan en deux dimensions au nom des arrondissements en remplaçant `geom_point` par `geom_text`.

```{r}
rp19 %>%
  filter(LPRM == "1") %>% # La personne de référence du ménage
  group_by(arrondissements) %>%
  summarize(moy_NBPI = weighted.mean(x = NBPI, w = IPONDI),
            moy_NPERR = weighted.mean(x = NPERR, w = IPONDI)) %>%
  ggplot() +
  geom_text(
    aes(x = moy_NBPI,
        y = moy_NPERR,
        label = arrondissements))
```
